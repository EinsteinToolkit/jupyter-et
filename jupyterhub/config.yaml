# Example Jupyterhub configuration for ESIPhub
hub:
  # output of second execution of 'openssl rand -hex 32'
  cookieSecret: ""
  db:
    type: sqlite-pvc
    pvc:
      accessModes:
        - ReadWriteOnce
      storage: 1Gi
      storageClassName: nfs
  extraConfig: |    
    from oauthenticator.github import GitHubOAuthenticator
    from oauthenticator.cilogon import CILogonOAuthenticator
    from oauthenticator import OAuthCallbackHandler
    import requests
    from tornado import gen, web

    # this is needed to allow logins by non-education identity providers that
    # do not have the eppn field
    # RH (2019-03-20) this does not work since jupyterhub is too old
    # c.CILogonOAuthenticator.additional_username_claim = 'email'
    # c.CILogonWhitelistAuthenticator.additional_username_claim = 'email'
    c.CILogonOAuthenticator.username_claim = 'email'

    class GitHubWhitelistAuthenticator(GitHubOAuthenticator):
     
        def check_whitelist(self, username):
            r = requests.get('http://whitelist.etkhub/users.txt')
            whitelist = r.text.split('\n')
            return username in whitelist

    class CILogonWhitelistCallbackHandler(OAuthCallbackHandler):

        @gen.coroutine
        def get(self):
          self.check_arguments()
          # copied from _login_user_pre_08
          data = {}
          user_info = yield self.authenticator.get_authenticated_user(self, data)
          if user_info is None:
            if 'bad_login' in data:
              raise web.HTTPError(403, "%s is not whitelisted", data['bad_login'])
            else:
              raise web.HTTPError(403)
          username = user_info['name']
          user = self.user_from_username(username)
          self.set_login_cookie(user)
          self.redirect(self.get_next_url(user))

    class CILogonWhitelistAuthenticator(CILogonOAuthenticator):
     
        # new versions of jupyterhub would pass userdict to the check_whitelist
        # function making this much easier
        @gen.coroutine
        def authenticate(self, handler, data=None):
            import traceback
            userdict = yield super(CILogonWhitelistAuthenticator, self).authenticate(handler, data)
            if userdict is None:
                return None
            #self.log.info("auth_state: %s" % repr(userdict))

            # copied from jupyterhub/auth.py
            username = self.normalize_username(userdict['name'])

            # the identity provider name as it appears on https://cilogon.org/
            idp_name = userdict['auth_state']['cilogon_user']['idp_name']

            # this makes the user name known to our caller
            data['bad_login'] = "'%s' from '%s'" % (username, idp_name)

            r = requests.get('http://whitelist.etkhub/blacklisted-users.txt')
            blacklist = r.text.split('\n')
            if username in blacklist:
                return None

            r = requests.get('http://whitelist.etkhub/users.txt')
            whitelist = r.text.split('\n')
            if username in whitelist:
                return userdict

            r = requests.get('http://whitelist.etkhub/blacklisted-organizations.txt')
            blacklist = r.text.split('\n')
            if idp_name in blacklist:
                return None

            r = requests.get('http://whitelist.etkhub/organizations.txt')
            whitelist = r.text.split('\n')
            if idp_name in whitelist:
                return userdict

            return None

        callback_handler = CILogonWhitelistCallbackHandler

    c.JupyterHub.authenticator_class = CILogonWhitelistAuthenticator
    #c.JupyterHub.authenticator_class = GitHubWhitelistAuthenticator
  extraVolumes:
    - hostPath:
         path: "/home/ubuntu/jupyterhub/templates"
      name: templates
  extraVolumeMounts:
    - name: templates
      mountPath: "/usr/local/share/jupyterhub/templates"
 

proxy:
  # output of second execution of 'openssl rand -hex 32'
  secretToken: ""


auth:
  #type: github
  github:
    # Oauth clientId and clientSecret
    clientId: "e08e8ab7f525dc8f099c"
    clientSecret: "735044c4bcf1a6cb3356c703b55b39d7826feaa4"
    callbackUrl: "https://etkhub.ndslabs.org/hub/oauth_callback"
  type: cilogon
  cilogon:
    # Oauth clientId and clientSecret
    clientId: "cilogon:/client_id/14f979f915effd1d51edb8381780dfa0"
    clientSecret: "XnZHzOH0MEehuVisqmwh5LYr5TmaPcTK53nANgNmbDxoGAqHwXfw4LGWTFvO5lhFAE6bJ-rm-Ychx9c5BO6dCg"
    callbackUrl: "https://etkhub.ndslabs.org/hub/oauth_callback"


singleuser:
  memory:
    guarantee: 1G
    limit: 8G
  cpu:
  #  guarantee: 2
    limit: 2
    guarantee: .5
  storage:
    type: none
  image:
    name: ndslabs/jupyter-et
    tag: latest
  defaultUrl: "/tree/home/jovyan/work"
  lifecycleHooks:
    postStart:
      exec:
        command:
          - "/usr/local/bin/start-notebook.sh"

cull:
  enabled: true
  timeout: 345600
  every: 3600
            
ingress:
  enabled: true
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 64m
  hosts:
    - etkhub.ndslabs.org
  tls:
   - hosts:
      - etkhub.ndslabs.org
     secretName: kubelego-tls-jupyterhub
